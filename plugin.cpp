/*
 * FogLAMP "simplepython" filter plugin.
 *
 * Copyright (c) 2019 Dianomic Systems
 *
 * Released under the Apache 2.0 Licence
 *
 * Author: Massimiliano Pinto
 */

#include <plugin_api.h>
#include <config_category.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <string>
#include <iostream>
#include <filter_plugin.h>
#include <filter.h>
#include <reading_set.h>
#include <version.h>
#include "simple_python.h"
#include <pyruntime.h>
#include <pythonreading.h>

#define FILTER_NAME "simple-python"

static const char *default_config = QUOTE({
	"plugin" : {
		"description" : "Simple Python filter plugin",
               	"type" : "string",
		"default" :  FILTER_NAME,
		"readonly": "true"
		},
	"enable": {
		"description": "A switch that can be used to enable or disable execution of the Simple Python filter.",
		"type": "boolean",
		"displayName": "Enabled",
		"default": "false"
		},
	"code": {
		"description": "Python code to execute",
		"type": "code",
		"displayName": "Python code",
		"default": "",
		"order" : "1"
		}
	});

using namespace std;

/**
 * The Filter plugin interface
 */
extern "C" {

/**
 * The plugin information structure
 */
static PLUGIN_INFORMATION info = {
	FILTER_NAME,              // Name
	VERSION,                  // Version
	0,                        // Flags
	PLUGIN_TYPE_FILTER,       // Type
	"1.0.0",                  // Interface version
	default_config            // Default plugin configuration
};

/**
 * Return the information about this plugin
 */
PLUGIN_INFORMATION *plugin_info()
{
	return &info;
}

/**
 * Initialise the plugin, called to get the plugin handle and setup the
 * output handle that will be passed to the output stream. The output stream
 * is merely a function pointer that is called with the output handle and
 * the new set of readings generated by the plugin.
 *     (*output)(outHandle, readings);
 * Note that the plugin may not call the output stream if the result of
 * the filtering is that no readings are to be sent onwards in the chain.
 * This allows the plugin to discard data or to buffer it for aggregation
 * with data that follows in subsequent calls
 *
 * @param config	The configuration category for the filter
 * @param outHandle	A handle that will be passed to the output stream
 * @param output	The output stream (function pointer) to which data is passed
 * @return		An opaque handle that is used in all subsequent calls to the plugin
 */
PLUGIN_HANDLE plugin_init(ConfigCategory* config,
			  OUTPUT_HANDLE *outHandle,
			  OUTPUT_STREAM output)
{
	SimplePythonFilter* handle =
		new SimplePythonFilter(FILTER_NAME,
					*config,
					outHandle,
					output);

	if (config->itemExists("code"))
	{
		handle->m_code = config->getValue("code");
	}
	else
	{
		Logger::getLogger()->fatal("Filter %s (%s) is missing the 'code' "
					   "configuration item, aborting filter setup",
					   handle->getConfig().getName().c_str(),
					   FILTER_NAME);
		// This aborts filter pipeline setup
		delete handle;
		return NULL;
	}

	// Embedded Python initialisation
	PythonRuntime::getPythonRuntime();

	return (PLUGIN_HANDLE)handle;
}

/**
 * Ingest a set of readings into the plugin for processing
 *
 * @param handle	The plugin handle returned from plugin_init
 * @param readingSet	The readings to process
 */
void plugin_ingest(PLUGIN_HANDLE *handle,
		   READINGSET *readingSet)
{
	SimplePythonFilter* filter = (SimplePythonFilter *)handle;
	bool enabled = false;
	string pythonCode;

	// Lock configuration items
	filter->lock();
	enabled = filter->isEnabled();
	pythonCode = filter->m_code;
	// Unlock configuration items
	filter->unlock();

	if (!enabled || !pythonCode.length())
	{
		// Current filter is not active: just pass the readings set
		filter->m_func(filter->m_data, readingSet);
		return;
	}

	PyGILState_STATE state = PyGILState_Ensure(); // acquire GIL

	// Returns borrowed reference: do not remove object
	PyObject* main = PyImport_AddModule("__main__");
	// Returns borrowed reference: do not remove object
	PyObject* globalDictionary = PyModule_GetDict(main);

	// New reference, to remove
	PyObject* userData = PyDict_New();

	// Create a global variable, dict, called "user_data"
	// Python code can access it via: global user_data
	PyDict_SetItemString(globalDictionary, "user_data", userData);

	// Just get all the readings in the readingset
	vector<Reading *>* readings = ((ReadingSet *)readingSet)->getAllReadingsPtr();

	// Iterate the input readings
	for (vector<Reading *>::iterator elem = readings->begin();
					 elem != readings->end(); )
	{
		PythonReading *pyReading = (PythonReading *)(*elem);
		PyObject* inputDict = pyReading->toPython(true);

		// Run Python code (with statements separated by \n)
		PyObject* run = PyRun_String(("exec(" + pythonCode + ")").c_str(),
					     Py_file_input,
					     globalDictionary,
					     inputDict);

		if (PyErr_Occurred())
		{
			filter->logErrorMessage();
			elem++;
		}
		else
		{
			// Delete reading data along with datapoints
			delete(*elem);

			// Set new Reading object with data returned from PyRun_String
			*elem = new PythonReading(inputDict);

			// Check
			if (*elem != NULL)
			{
				// Call asset tracker
				AssetTracker::getAssetTracker()->addAssetTrackingTuple(filter->getConfig().getName(),
									(*elem)->getAssetName(),
									string("Filter"));
				elem++;
			}
			else
			{
				// Remove current reading from result set
				elem = readings->erase(elem);
			}
		}

		Py_CLEAR(run);
		Py_CLEAR(inputDict);
	}

	// Remove user_data from dict
	PyDict_DelItemString(globalDictionary, "user_data");

	Py_CLEAR(userData);

	PyGILState_Release(state);

	// Pass readingSet to the next filter
	filter->m_func(filter->m_data, readingSet);
}

/**
 * Call the shutdown method in the plugin
 */
void plugin_shutdown(PLUGIN_HANDLE *handle)
{
	SimplePythonFilter* filter = (SimplePythonFilter *)handle;

	// Remove filter object	
	delete filter;
}

/**
 * Apply filter plugin reconfiguration
 *
 * @param    handle	The plugin handle returned from plugin_init
 * @param    newConfig	The new configuration to apply.
 */
void plugin_reconfigure(PLUGIN_HANDLE *handle, const string& newConfig)
{
	SimplePythonFilter* filter = (SimplePythonFilter *)handle;
	ConfigCategory category("new", newConfig);

	// Lock configuration items
	filter->lock();

	// Update Python code to execute
	if (category.itemExists("code"))
	{
		filter->m_code = category.getValue("code");
	}

	// Update the enable flag
	if (category.itemExists("enable"))
	{
		bool enabled = category.getValue("enable").compare("true") == 0 ||
				category.getValue("enable").compare("True") == 0;

		filter->setEnableFilter(enabled);
	}

	// Unlock configuration items
	filter->unlock();
}

// End of extern "C"
};

/**
 * Log current Python 3.x error message
 */
void SimplePythonFilter::logErrorMessage()
{
#ifdef PYTHON_CONSOLE_DEBUG
	// Print full Python stacktrace 
	PyErr_Print();
#endif
	//Get error message
	PyObject *pType, *pValue, *pTraceback;
	PyErr_Fetch(&pType, &pValue, &pTraceback);
	PyErr_NormalizeException(&pType, &pValue, &pTraceback);

	PyObject* str_exc_value = PyObject_Repr(pValue);
	PyObject* pyExcValueStr = PyUnicode_AsEncodedString(str_exc_value,
							    "utf-8",
							    "Error ~");

	// NOTE from :
	// https://docs.python.org/3.5/c-api/exceptions.html
	//
	// The value and traceback object may be NULL
	// even when the type object is not.	
	const char* pErrorMessage = pValue ?
				    PyBytes_AsString(pyExcValueStr) :
				    "no error description.";

	Logger::getLogger()->fatal("Filter '%s', Python code "
				   "'%s': Error '%s'",
				   this->getConfig().getName().c_str(), 
				   m_code.c_str(),
				   pErrorMessage);

	// Reset error
	PyErr_Clear();

	// Remove references
	Py_CLEAR(pType);
	Py_CLEAR(pValue);
	Py_CLEAR(pTraceback);
	Py_CLEAR(str_exc_value);
	Py_CLEAR(pyExcValueStr);
}
